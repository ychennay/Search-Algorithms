/**
 this code implements a solution to the N-Queens problem, and is taken from the
 Udemy course "Algorithmic Problems in Java" by Holczer Balazs. I am using it only as a learning reference,
 and do not claim ownership or authorship of this code.
 */
public class Me {

    private int[] queensArray;
    private int numQueens; // this will also be equal to the number of rows

    public QueensProblem(int numQueens){

        queensArray = new int[numQueens]; // creates an array of integers that is equal
        // to the number of queens (numQueens)

        this.numQueens = numQueens; // we use the "this" keyword to shadow the input numQueens
    }

    public void solveQueensProblem(int rowIndex) { //void: we do not expect this method to return any object, only to print the solution
        // we will implement backtracking in order to solve this solution
        // int rowIndex refers to the row of the "chessboard" that we are on...

        arrangeQueens(0);
    }

    private void arrangeQueens(int rowIndex){

        for (int i=0; i<numQueens; i++){

            if( isPlaceValid(rowIndex, i)){
                queensArray[rowIndex] = i; // if this is a valid place to put the queen,
                // then the 1st, 2nd, 3rd... nth element of that list becomes i.

                if (rowIndex == numQueens - 1){
                    printQueens();
                }else {
                    arrangeQueens(rowIndex+1); //otherwise, if this does not work, then move on to the next row
                }
            }
        }
    }

    private void printQueens(){

        for (int i=0; i<numQueens; i++){
            for (int j=0; j<numQueens; j++){

                if (queensArray[i] == j){
                    System.out.print(" X ");
                } else {
                    System.out.print(" - ");
                }
            }
        }
    }

    private boolean isPlaceValid(int rowIndex, int columnIndex){

        for (int i=0; i<rowIndex; i++){
            if(queensArray[i] == columnIndex) {
                return false; // if the queen is in the same row as another queen, then this
                //place is not valid, and therefore we must return false
            }
            if ( (i - rowIndex) == queensArray[i] - columnIndex){
                return false; // checks if another queen is in the diagonal
                // of the proposed slot. Since to be in a diagonal on a chessboard implies that the
                //indexing (x,y) --> x - y = a - b, with (a,b) being the new proposed spot, we check to see
                // if the proposed position has the same position
            }
            if ( (i - rowIndex) == columnIndex - queensArray[i]){
                return false; // this checks the other diagonal path
            }
        }
        return true; // if the code manages to make it all the way here, then it means it has passed all of the checks above
        // and is indeed a valid spot for the next queen
    }
}
