// merge sort algorithm I created following the course content from Practical Data Structures and Algorithms by Imtiaz Ahmad (Udemy course).
// Please note this piece of code was not created by me, but reproduced after following Imtiaz's instructions. He reserves all rights to
// this code.

package mergeSort;

public class MergeSort {

    public static void sort(int[] inputArray) {
        sort(inputArray, 0, inputArray.length - 1);
    }


    public static void sort(int[] inputArray, int start, int end) {

        if (end <= start) {
            return;
        }
        int midpoint = (start + end) / 2;
        sort(inputArray, start, midpoint);
        sort(inputArray, midpoint + 1, end);
        merge(inputArray, start, midpoint, end);

    }

    public static void merge(int[] inputArray, int start, int midpoint, int end) {

        int tempArray[] = new int[end - start + 1];
        int leftStart = start;
        int rightStart = midpoint + 1;
        int counter = 0;

        while (leftStart <= midpoint && rightStart <= end) {
            if (inputArray[leftStart] < inputArray[rightStart]) {
                tempArray[counter] = inputArray[leftStart];
                leftStart++;
            } else {
                tempArray[counter] = inputArray[rightStart];
                rightStart++;
            }
            counter++;
        }

        if(leftStart <= midpoint) {
            while (leftStart <= midpoint) {
                tempArray[counter] = inputArray[leftStart];
                leftStart++;
                counter++;
            }
        }
        else if (rightStart <= end){
            while (rightStart <= end){
                tempArray[counter] = inputArray[rightStart];
                rightStart++;
                counter++;
            }
            }


            // copy temp array into input array

        for (int i = 0; i < tempArray.length; i++){

            inputArray[start + i] = tempArray[i];
        }


    }
}

