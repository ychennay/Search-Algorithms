// merge-sort attempt one based upon the Udemy course Practical Data Structures and Algorithms by Imtiaz Ahmad. This code does NOT run
// correctly.

package mergeSort;

public class MergeSort {

    public static void sort(int[] inputArray){
        sort(inputArray, 0, inputArray.length -1);
    }


    public static void sort(int[] inputArray, int start, int end){

        if (end <= start){
            return;
        }
        int midpoint = (start + end) / 2;
        sort(inputArray, start, midpoint);
        sort(inputArray, midpoint + 1, end);
        merge(inputArray, start, midpoint, end);

    }

    public static void merge(int[] inputArray, int start, int midpoint, int end) {

        int rightStart = midpoint + 1;
        int[] leftArray = new int[midpoint - start + 1];
        int[] rightArray = new int[end - rightStart + 1];

        // create a left and right array
        for (int i = 0; i < leftArray.length - 1; i++) {

            leftArray[i] = inputArray[i];

        }

        for (int j = 0; j < rightArray.length - 1; j++) {

            rightArray[j] = inputArray[rightStart + j];

        }
        // add in as large int as possible to represent infinity
        leftArray[leftArray.length - 1] = 999999;
        rightArray[rightArray.length - 1] = 999999;

        //compare the two left and right arrays

        int rightRunner = 0;
        int leftRunner = 0;
        int inputLength = inputArray.length;
        for (int runner = 0; runner < inputLength; runner++) {
            while (leftRunner < leftArray.length - 1 || rightRunner < rightArray.length - 1) {

                if (leftArray[leftRunner] >= rightArray[rightRunner]) {
                    inputArray[runner] = rightArray[rightRunner];
                    rightRunner = rightRunner + 1;
                } else {
                    inputArray[runner] = leftArray[leftRunner];
                    leftRunner = leftRunner + 1;
                }
            }
        }
    }
}
